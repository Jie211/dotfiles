# if zplug is not installed, automatically clone it and reload shell
if [[ ! -d ~/.zplug ]]; then
  echo "zplug is not installed in this machine."
  echo "Installing zplug..."
  echo ""
  git clone https://github.com/zplug/zplug ~/.zplug
  source ~/.zplug/init.zsh && zplug update --self
fi

if [[ ! -d ~/.tmux/plugins/tpm  ]]; then
  echo "TPM is not installed in this machine."
  echo "Installing TPM///"
  echo ""
  git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
fi

source ~/.zplug/init.zsh


# Triaging
zplug 'zsh-users/zsh-history-substring-search'
zplug 'zsh-users/zsh-completions'
zplug 'supercrabtree/k'

# highlighting
zplug "zsh-users/zsh-syntax-highlighting", nice:10

# histuniq color
zplug "Jxck/dotfiles", as:command, use:"bin/{histuniq,color}"

# git-calender frozen:1 -> no upgrade
zplug "k4rthik/git-cal", as:command, frozen:1

# fzf from:gh-r -> GithubReleases use:* -> OS delect
if [[ "$OSTYPE" == "linux-gnu" ]]; then
  zplug "junegunn/fzf-bin", \
    from:gh-r, \
    as:command, \
    rename-to:fzf, \
    use:"*linux*amd64*"
elif [[ "$OSTYPE" == "darwin"* ]]; then
  zplug "junegunn/fzf-bin", \
    from:gh-r, \
    as:command, \
    rename-to:fzf, \
    use:"*darwin*amd64*"

  zplug "lib/clipboard", from:oh-my-zsh
fi

# git plug
zplug "plugins/git", from:oh-my-zsh

# dependencies
zplug "stedolan/jq", \
  from:gh-r, \
  as:command, \
  rename-to:jq
zplug "b4b4r07/emoji-cli", \
  on:"stedolan/jq"

zplug "mollifier/anyframe"
#
zplug "b4b4r07/enhancd", use:init.sh
#
zplug "b4b4r07/zsh-gomi", on:"junegunn/fzf-bin"
#
zplug "mrowa44/emojify", as:command
#
zplug "plugins/colored-man-pages", from:oh-my-zsh
#
###############
# theme
###############

setopt prompt_subst
# zplug "adambiggs/zsh-theme", use:adambiggs.zsh-theme, from:oh-my-zsh
zplug "caiogondim/bullet-train-oh-my-zsh-theme"
BULLETTRAIN_PROMPT_ORDER=(
  time
  status
  context
  dir
  git
  hg
  cmd_exec_time
)
BULLETTRAIN_STATUS_SHOW=true
BULLETTRAIN_STATUS_EXIT_SHOW=true
BULLETTRAIN_TIME_12HR=false
BULLETTRAIN_DIR_EXTENDED=0
BULLETTRAIN_EXEC_TIME_SHOW=true

################
# config
################

EMOJI_CLI_KEYBIND="^f"

bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

# anyfame
zstyle ":anyframe:selector:" use fzf
zstyle ":anyframe:selector:fzf:" command 'fzf --extended'
bindkey '^xr' anyframe-widget-put-history
bindkey '^xk' anyframe-widget-kill
bindkey '^xt' anyframe-widget-tmux-attach

# completiong
zstyle ':completion:*' list-colors 'di=34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'

autoload -Uz compinit && compinit

# Add <TAB> completion handlers for fzf *after* fzf is loaded
_fzf_complete_z() {
  _fzf_complete '--multi --reverse' "$@" < <(raw_z)
}

# fzf


export FZF_DEFAULT_OPTS='
  --color fg:242,bg:236,hl:65,fg+:15,bg+:239,hl+:108
  --color info:108,prompt:109,spinner:108,pointer:168,marker:168
'

# vf - fuzzy open with vim from anywhere
vf() {
  local files

  files=(${(f)"$(locate -i -0 $@ | grep -z -vE '~$' | fzf --read0 -0 -1 -m)"})

  if [[ -n $files ]]
  then
    vim -- $files
    print -l $files[1]
  fi
}

# fo - open
#   - CTRL-O to open with `open` command,
#   - CTRL-E or Enter key to open with the $EDITOR
fo() {
  local out file key
  out=$(fzf --query="$1" --exit-0 --expect=ctrl-o,ctrl-e)
  key=$(head -1 <<< "$out")
  file=$(head -2 <<< "$out" | tail -1)
  if [ -n "$file" ]; then
    [ "$key" = ctrl-o ] && open "$file" || ${EDITOR:-vim} "$file"
      fi
}

# fd - cd to selected directory
fd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
        -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

# fda - including hidden directories
fda() {
  local dir
  dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
}

# fkill - kill process
fkill() {
  pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

  if [ "x$pid" != "x" ]
  then
    kill -${1:-9} $pid
  fi
}

# fs [FUZZY PATTERN] - Select selected tmux session
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fs() {
  local session
  session=$(tmux list-sessions -F "#{session_name}" | \
    fzf --query="$1" --select-1 --exit-0) &&
  tmux switch-client -t "$session"
}

################
# zplug
################

# Install plugins if there are plugins that have not been installed
if ! zplug check --verbose; then
  zplug install
fi



###############
# function
###############
function myip {
  ifconfig lo0 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "lo0 : " $2}'
  ifconfig en0 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "en0 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
  ifconfig en0 | grep 'inet6 ' | sed -e 's/ / /' | awk '{print "en0 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
  ifconfig en1 | grep 'inet ' | sed -e 's/:/ /' | awk '{print "en1 (IPv4): " $2 " " $3 " " $4 " " $5 " " $6}'
  ifconfig en1 | grep 'inet6 ' | sed -e 's/ / /' | awk '{print "en1 (IPv6): " $2 " " $3 " " $4 " " $5 " " $6}'
}

function update_zplug {
  echo '———> Updating zplug...';
  zplug update --self
  echo '———> Updating zplug packages...';
  zplug update
}
################
# system
################
alias vi=vim

export PATH="/usr/local/bin:/usr/local/lib:/usr/bin:/bin:/usr/sbin:/sbin"
export TERM="xterm-256color"
export LDFLAGS="-L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib"
export XDG_CONFIG_HOME="$HOME/.config"

# ls color
if ls --color > /dev/null 2>&1; then # GNU `ls`
  colorflag="--color"
else # OS X `ls`
  colorflag="-G"
fi

alias ls='ls ${colorflag}'

function loadlib() {
  lib=${1:?"You have to specify a library file"}
  if [ -f "$lib" ];then #ファイルの存在を確認
    . "$lib"
  fi
}

loadlib ~/.zsh-local

zplug load --verbose
